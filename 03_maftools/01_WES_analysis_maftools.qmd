---
title: "NRG-GY003 WES Analysis"
subtitle: "Whole Exome genomic analysis of NRG-GY003 ovarian cancer tumors"
description: "Genomic analysis of tumor exomes from patients with recurrent ovarian cancer treated with immune checkpoint inhibitors (NIVO or IPI/NIVO) treated on the NRG-GY003 clinical trial."

author:
  - name: Kelsey Monson
    degrees:
      - PhD
      - MS
    orcid: 0000-0003-1093-8628
    email: kelsey.monson@mssm.edu
    affiliations:
      - ref: ISMMS

affiliations:
  - id: ISMMS
    name: Icahn School of Medicine at Mount Sinai
    city: New York
    state: NY
    department: Immunology and Immunotherapy

title-block-banner: "#f0f3f5"
title-block-banner-color: "black"

keywords: "Genomics, Whole Exome, Immunotherapy, R, Ovarian Cancer"
date: today

format: 
  html: 
    toc: true
    code-overflow: wrap
    embed-resources: true
    
fig-cap-location: margin
# execute: 
#  warning: false
editor: visual
---

# Intro

## Variant Filtering Strategy

I first used the [Nextflow Sarek](https://nf-co.re/sarek/3.4.0/) pipeline to align the raw fastq files. Below is the workflow I used:

![*Note that, at this time, I have only merged the variants from the SNP/indel callers, as ASCAT and the other SV/CNV callers do not have .vcfs as their output.*](input/Sarek_pipeline.png)

Here is the detailed variant filtering strategy I used to come up with the MAF file used in this analysis:

-   First find consensus somatic calls:

    -   Present in \>=2 somatic callers (`Freebayes`, `Mutect2`, `Strelka2`)
    -   Include variants annotated with **PASS**
        -   **PASS**: indicates the variant passed all quality filters applied by the variant caller

        -   Considered the gold-standard for high-quality variants passing the variant caller's built-in quality control filters
    -   Further refine **PASS** variants
        -   Minimum tumor **Read Depth = 20**: ensures sufficient coverage (i.e. evidence) to confidently call tumor variants from normal and/or distinguish from random sequencing errors

        -   Allele frequency **0.05 \< AF \< 0.95**:

            -   \>0.05: also helps avoid random sequencing errors/miss-called variants

            -   \<0.95: helps avoid germline contamination

-   Identify rare pathogenic germline variants:

    -   Present in \>=2 germline callers (`Freebayes`, `Haplotypecaller`, `Strelka2`)

    -   Identify those most likely to be pathogenic

        -   Limit to **protein-coding variants** (drop all intergenic and non-coding variants)

        -   Must be annotated with **HIGH** impact

    -   Eliminate common variants

        -   "Rare" variants are typically those present in \<1% of the population

        -   Because I was worried about missing variants, I initially excluded those with \>5% population frequency, but this was too liberal.

        -   I revised the script to set the threshold to 1% and will re-generate the MAF file eventually

        -   For the current analysis, I QC'd the variants and only identified likey oncogenic variants in BRCA1/2, so limited the germline analysis to those genes.

    -   Include all likely oncogenes regardless of population frequency ("BRCA1" "BRCA2" "TP53" "PTEN" "ATM" "CHEK2" "PALB2" "APC" "MUTYH")

-   Generated consensus MAF file

    -   The above analysis generated two vcfs, one with the processed somatic variants and one with likely pathogenic germline variants

    -   These variants were annotated as SOMATIC or GERMLINE_PATHOGENIC, respectively in the vcfs

    -   I then concatenated these variants to one MAF file for the entire sample using the [Nextflow vcf2maf](https://nf-co.re/modules/vcf2maf) pipeline.

This consensus MAF is what is used for the downstream analysis presented here.

## Loading in the data

```{r}
#| warning: false
#| code-fold: true
#| code-summary: "Packages Used"

# Load packages

library(maftools) # For majority of maf file analysis
library(mclust)
library("BSgenome.Hsapiens.UCSC.hg38", quietly = TRUE)
library(NMF) # For signature calculation
library(pheatmap) # For nice heatmaps
library(ghibli) # For pretty colors
library(gt) # For nice tables (maybe?)
```

Load in raw MAF file and the clinical data

```{r}
laml = read.maf(maf="input/merged_consensus_all_samples_germline.maf",
                clinicalData ="input/NRG-GY00_laml_annot_2.csv",
                rmFlags = TRUE # "FLAGS, frequently mutated genes in public exomes"
                )

```

::: callout-tip
Setting `rmFlags` = `TRUE` removes frequently mutated genes in public exomes

Details on these genes can be found [here](https://bmcmedgenomics.biomedcentral.com/articles/10.1186/s12920-017-0309-7#MOESM1).
:::


```{r}
#| code-fold: true
#| code-summary: "Data cleaning: setting levels for factor variables"

# RECIST response (CR, PR, SD, PD)
laml@clinical.data$response <- factor(laml@clinical.data$response, levels=c("CR","PR","SD","PD"))
#table(laml@clinical.data$response)

# Detailed response including durable and progressive SD
laml@clinical.data$response2 <- factor(laml@clinical.data$response2, levels=c("CR","PR","SD_CB","SD_NCB","PD"))
# table(laml@clinical.data$response2)

# Response by treatment
laml@clinical.data$response_tx <- factor(laml@clinical.data$response_tx, levels=c("Nivo_CB","Combo_CB","Nivo_NCB","Combo_NCB"))
#table(laml@clinical.data$response_tx)

# Race (White, Non-White, and Not Reported)
laml@clinical.data$race2 <- factor(laml@clinical.data$race2, levels=c("W","NW","NR"))
#table(laml@clinical.data$race2)

# Site (dichotomous)
laml@clinical.data$Site2 <- factor(laml@clinical.data$Site2, levels=c("Adnexa","Non_Adnexa"))
#table(laml@clinical.data$Site2)

# Primary/Met
laml@clinical.data$Primary_Met <- factor(laml@clinical.data$Primary_Met, levels=c("P","M"))
#table(laml@clinical.data$Primary_Met)
```

## Subsetting datasets

We have some normal samples with no matched tumor, and we may be interested in doing subtype-specific analysis.

Let's subset to only tumor samples, and then create further subsetted datasets based on clinical characteristics.

### Only tumor samples

I also annotated with pathogenic germline variants; the only relevant ones were in BRCA1 and BRCA2, so we are subsetting to somatic mutations and pathogenic germline variants.

```{r}
laml_tum = subsetMaf(maf = laml, clinQuery = "Tissue %in% 'Tu'")
laml_tum = subsetMaf(maf = laml_tum, query = "vcf_id %in% c('SOMATIC','GERMLINE_PATHOGENIC') ")
```

### Other subsets

We can also subset by tumor histology, treatment, and response.

::: {.callout-note appearance="simple" collapse="true"}
#### See other subsets

```{r}
## Comparing Serous vs others
laml_ser = subsetMaf(maf = laml_tum, clinQuery = "celltype %in% 'Serous_Adenocarcinoma'")
# Subsetting the other dataset to "not serous"
`%ni%` <- Negate(`%in%`)
laml_other = subsetMaf(maf = laml_tum, clinQuery = "celltype %ni% 'Serous_Adenocarcinoma'")
## Comparing CB vs NCB
laml_CB = subsetMaf(maf = laml_tum, clinQuery = "responseCB %in% 'CB'")
laml_NCB = subsetMaf(maf = laml_tum, clinQuery = "responseCB %in% 'NCB'")
## Subsetting by treatment to see if there are differences
### There shouldn't be any, since treatment assignment was randomized, but is is good to confirm.
laml_nivo = subsetMaf(maf = laml_tum, clinQuery = "tx %in% 'Nivo'")
laml_combo = subsetMaf(maf = laml_tum, clinQuery = "tx %in% 'Combo'")
```
:::

## View the MAF file summary

Here is a basic summary of the MAF file

```{r}
laml_tum
```

```{r}
#| code-fold: true
#| code-summary: "These are some more summaries you can generate"
# I'm commenting them out as they have too much info for the tables to be readable.

# #Shows sample summary.
# getSampleSummary(laml_tum)

# #Shows gene summary.
# getGeneSummary(laml_tum)

# #shows clinical data associated with samples
# getClinicalData(laml_tum)

# #Shows all fields in MAF
# getFields(laml_tum)

```

# Visual Summaries

## Summarize the maf file

We can use `plotmafSummary` to plot the summary of the maf file, which displays number of variants in each sample as a stacked barplot and variant types as a boxplot summarized by `Variant_Classification`.

```{r}
plotmafSummary(maf = laml_tum, rmOutlier = TRUE, addStat = 'median', dashboard = TRUE, titvRaw = FALSE)
```

```{r}
#Use mafbarplot for a minimal barplot of mutated genes.
mafbarplot(maf =  laml_tum)
```

## Summarize the other subsets

Here are the mutation distributions for the other subsets.

As a sanity check, the majority of Serous samples have TP53 mutations, while there are few TP53 mutations in the top 10 for the non-Serous samples (as is expected).

::: {.callout-note appearance="simple" collapse="true"}
### See the other subsets

#### By Histology

Serous

```{r}
## Serous 
plotmafSummary(maf = laml_ser, rmOutlier = TRUE, addStat = 'median', dashboard = TRUE, titvRaw = FALSE)
```

```{r}
mafbarplot(maf =  laml_ser)
```

Non-Serous

```{r}
## Non-serous
plotmafSummary(maf = laml_other, rmOutlier = TRUE, addStat = 'median', dashboard = TRUE, titvRaw = FALSE)
```

```{r}
mafbarplot(maf =  laml_other)
```

#### By Response

CB

```{r}
## CB
plotmafSummary(maf = laml_CB, rmOutlier = TRUE, addStat = 'median', dashboard = TRUE, titvRaw = FALSE)
```

```{r}
mafbarplot(maf =  laml_CB)
```

NCB

```{r}
## NCB
plotmafSummary(maf = laml_NCB, rmOutlier = TRUE, addStat = 'median', dashboard = TRUE, titvRaw = FALSE)
```

```{r}
mafbarplot(maf =  laml_NCB)
```

#### By Treatment

Nivo

```{r}
## Nivo
plotmafSummary(maf = laml_nivo, rmOutlier = TRUE, addStat = 'median', dashboard = TRUE, titvRaw = FALSE)
```

```{r}
mafbarplot(maf =  laml_nivo)
```

Combo

```{r}
## Combo
plotmafSummary(maf = laml_combo, rmOutlier = TRUE, addStat = 'median', dashboard = TRUE, titvRaw = FALSE)
```

```{r}
mafbarplot(maf =  laml_combo)
```
:::

# Oncoprints

Oncoprints (or "oncoplots" as the wrapper function in `maftools` is called) summarize complex genomic features of a given dataset.

```{r fig.width=9}
#oncoplot for top ten mutated genes.
oncoplot(maf = laml_tum, top = 10)
```

These are the key features and how they are interpreted:

-   Columns represent individual patients.
    -   Reading column-wise, you can see the collection of alterations in a patient's tumor for the given set of genes.
    -   The bar plot on the top is a count of tumor mutation burden per patient, color-coded by mutation type.
-   Rows are altered genes.
    -   Alterations are color-coded to indicate their type (e.g. mutation, deletion, insertion)
    -   Genes can be further annotated with key features (e.g. high impact/likely pathogenic mutations, germline variants, etc.)
-   The bar plot on the right summarizes alterations in a given gene for the entire dataset.
-   Many more features and annotations can be added to further characterize the dataset.

:::{.callout-caution}

### #*KelseyNote*#

Something to be aware of, especially as there are a number of mucins that are coming up, is that some samples were tumor-only and some were matched normal; would be good to annotate the metadata with this info and see if the mucins are coming up more in the tumor-only samples, since these genes tend to be highly polymorphic.

Also re: mucins, MUC16 is one of the genes that's filtered out when using the FLAGS filter (it's #2 on the list of top mutated genes). If we include it, it's the 13th most mutated gene, but there are only 9 patients who have mutations. 

**Questions**

1. Do we care about MUC16 mutations?

*Chatted with Yanis about this, we might be interested in this, at least in relation to his project for where the mutations are coming from (if they're all in the cleaved region, we don't care so much, but if they're in the membrane-bound region, this could be a problem). He will see where his antibody binds, and I will work on making a lollipop plot in our data. Based on cBioPortal, all the [ovarian cancer mutations](https://www.cbioportal.org/results/mutations?cancer_study_list=hgsoc_msk_2021%2Chgsoc_tcga_gdc%2Clgsoc_mapk_msk_2022%2Covary_cptac_gdc%2Covary_geomx_gray_foundation_2024%2Cmsk_spectrum_tme_2022%2Cov_tcga%2Cov_tcga_pub%2Cov_tcga_pan_can_atlas_2018%2Covarian_msk_2025%2Cscco_mskcc&Z_SCORE_THRESHOLD=2.0&RPPA_SCORE_THRESHOLD=2.0&profileFilter=mutations%2Cstructural_variants%2Ccna%2Cgistic&case_set_id=all&gene_list=MUC16&geneset_list=%20&tab_index=tab_visualize&Action=Submit) are in the extracellular region, not the transmembrane or cytoplasmic regions (which is good).*

2. Should we be excluding the other mucins from the analysis? (And does it matter beyond individual gene-level analysis? It could affect multiple testing adjustments.)

:::


```{r fig.width=9}
# Highlight by specific attribute in MAF file
oncoplot(maf = laml_tum, top = 10,
         additionalFeature = c("IMPACT", "HIGH"))

# Add transitions/transversions  
oncoplot(maf = laml_tum, top = 10, draw_titv = TRUE)

# cBioPortal alteration nomenclature 
oncoplot(maf = laml_tum, top = 10, cBioPortal = TRUE)
```


## Oncoprints by clinical data

```{r}
#| fig.width: 9

## Primary vs metastatic sites
oncoplot(maf = laml_tum, clinicalFeatures = 'Primary_Met', sortByAnnotation = TRUE)
## Cell type
oncoplot(maf = laml_tum, clinicalFeatures = 'celltype', sortByAnnotation = TRUE)
## ICI response
oncoplot(maf = laml_tum, clinicalFeatures = c('responseCB','response2'), sortByAnnotation = TRUE)
## ICI response and treatment
oncoplot(maf = laml_tum, clinicalFeatures = 'response_tx', sortByAnnotation = TRUE)
## Mutational signature
oncoplot(maf = laml_tum, clinicalFeatures = 'Signature', sortByAnnotation = TRUE)
## Race
oncoplot(maf = laml_tum, clinicalFeatures = 'race', sortByAnnotation = TRUE)
## Site
oncoplot(maf = laml_tum, clinicalFeatures = c('Site2','Site'), sortByAnnotation = TRUE)

## Stratified by histology
## Serous
oncoplot(maf = laml_ser, clinicalFeatures = c('Site2','Site','celltype'), sortByAnnotation = TRUE)
## Non-Serous
oncoplot(maf = laml_other, clinicalFeatures = c('Site2','Site','celltype'), sortByAnnotation = TRUE)

```

## Oncogenic signaling pathways

`sigpw` plots enrichment for known oncogenic signaling pathways as defined in TCGA, [Sanchez/Vega et al](https://pubmed.ncbi.nlm.nih.gov/29625050/).

```{r}
#| fig.width: 9
#| fig.height: 8
#| warning: false

# Plot genes in 2 top oncogenic signaling pathways
oncoplot(maf = laml_tum, pathways = "sigpw", gene_mar = 8, fontSize = 0.6, topPathways = 2)
```

```{r}
#| fig.width: 9
#| warning: false

# Collapse to just plot the pathways, now top 5
oncoplot(maf = laml_tum, pathways = "sigpw", gene_mar = 8, fontSize = 0.6, topPathways = 5, 
         collapsePathway = TRUE)
```

**Pathways by Response**

```{r}
#| fig.width: 9
#| warning: false

# Response
oncoplot(maf = laml_tum, pathways = "sigpw", gene_mar = 8, fontSize = 0.6, topPathways = 5, 
         collapsePathway = TRUE,
         clinicalFeatures = 'responseCB', sortByAnnotation = TRUE)

# Response by treatment
oncoplot(maf = laml_tum, pathways = "sigpw", gene_mar = 8, fontSize = 0.6, topPathways = 5, 
         collapsePathway = TRUE,
         clinicalFeatures = 'response_tx', sortByAnnotation = TRUE)
```

**Pathways by Histology**

Since these are the top pathways for the whole cohort, they may be masking histologically-specific pathways.

This is where it is useful to subset the data. Here I am plotting the top pathways for serous and all non-serous patients separately.

```{r}
#| fig.width: 9
#| warning: false

# Serous
oncoplot(maf = laml_ser, pathways = "sigpw", gene_mar = 8, fontSize = 0.6, topPathways = 5, 
         collapsePathway = TRUE,
         clinicalFeatures = 'celltype')
# Non-serous 
oncoplot(maf = laml_other, pathways = "sigpw", gene_mar = 8, fontSize = 0.6, topPathways = 5, 
         collapsePathway = TRUE,
         clinicalFeatures = 'celltype')
```

## Biological processes of known tumor drivers

`smgbp` plots enrichment for pan-cancer significantly mutated genes, classified by biological processes, per [Bailey et al](https://pubmed.ncbi.nlm.nih.gov/29625053/).

Here are the top 2 biological processes of known drivers

```{r}
#| fig.width: 9
#| fig.height: 8
#| warning: false

# Note that I have highlighted the BRCA1/2 germline variants
oncoplot(maf = laml_tum, pathways = "smgbp", gene_mar = 8, fontSize = 0.8, topPathways = 2, 
         additionalFeature = c("vcf_id", "GERMLINE_PATHOGENIC"))

```

**Pathways by Response & Histology**

```{r}
#| fig.width: 9
#| fig.height: 8
#| warning: false

# Response
oncoplot(maf = laml_tum, pathways = "smgbp", gene_mar = 8, fontSize = 0.8, topPathways = 2,
         clinicalFeatures = 'responseCB', sortByAnnotation = TRUE,
         additionalFeature = c("vcf_id", "GERMLINE_PATHOGENIC"))

# Detailed response (note that none of the germline variants had CR or PR)
oncoplot(maf = laml_tum, pathways = "smgbp", gene_mar = 8, fontSize = 0.8, topPathways = 2,
         clinicalFeatures = 'response2', sortByAnnotation = TRUE,
         additionalFeature = c("vcf_id", "GERMLINE_PATHOGENIC"))

# Response by treatment 
oncoplot(maf = laml_tum, pathways = "smgbp", gene_mar = 8, fontSize = 0.8, topPathways = 2,
         clinicalFeatures = 'response_tx', sortByAnnotation = TRUE,
         additionalFeature = c("vcf_id", "GERMLINE_PATHOGENIC"))

# Histology
oncoplot(maf = laml_tum, pathways = "smgbp", gene_mar = 8, fontSize = 0.8, topPathways = 2,
         clinicalFeatures = 'celltype', sortByAnnotation = TRUE,
         additionalFeature = c("vcf_id", "GERMLINE_PATHOGENIC"))

```

**Pathways by mutational signature**\*

```{r}
#| fig.width: 9
#| fig.height: 8
#| warning: false

oncoplot(maf = laml_tum, pathways = "smgbp", gene_mar = 8, fontSize = 0.8, topPathways = 2,
         clinicalFeatures = 'Signature', sortByAnnotation = TRUE,
         additionalFeature = c("vcf_id", "GERMLINE_PATHOGENIC"))
```

::: callout-caution
### #*KelseyNote*#

\*Will need to return to this, but it seems like sig1 is more BRCA1 while sig2 is more BRCA2.

I need to re-call the mutational signatures (downstream of these analyses in my original script) and update this section.
:::

**Top pathways**

Now collapsing the plots to show only the pathways

```{r}
#| fig.width: 9
#| warning: false

# Top 5 pathways 
oncoplot(maf = laml_tum, pathways = "smgbp", gene_mar = 8, fontSize = 0.6, topPathways = 5, 
         collapsePathway = TRUE)

# Top 10 pathways*
# *I've set `topPathways` = 10 but this is 24 pathways, not sure what's going on there...
oncoplot(maf = laml_tum, pathways = "smgbp", gene_mar = 8, fontSize = 0.6, topPathways = 10, 
         collapsePathway = TRUE)

# By response
oncoplot(maf = laml_tum, pathways = "smgbp", gene_mar = 8, fontSize = 0.6, topPathways = 10, 
         collapsePathway = TRUE,
         clinicalFeatures = 'responseCB', sortByAnnotation = TRUE)

# By response and treatment
oncoplot(maf = laml_tum, pathways = "smgbp", gene_mar = 8, fontSize = 0.6, topPathways = 10, 
         collapsePathway = TRUE,
         clinicalFeatures = 'response_tx', sortByAnnotation = TRUE)

# By histology
oncoplot(maf = laml_tum, pathways = "smgbp", gene_mar = 8, fontSize = 0.6, topPathways = 10, 
         collapsePathway = TRUE,
         clinicalFeatures = 'celltype', sortByAnnotation = TRUE)

```

**Top pathways by histology**

As with the oncogenic signaling pathways, I am plotting these separately for serous and non-serous.

```{r}
#| fig.width: 9
#| warning: false

# Serous
oncoplot(maf = laml_ser, pathways = "smgbp", gene_mar = 8, fontSize = 0.6, topPathways = 10, 
         collapsePathway = TRUE,
         clinicalFeatures = 'celltype')

# Non-serous
oncoplot(maf = laml_other, pathways = "smgbp", gene_mar = 8, fontSize = 0.6, topPathways = 10,
         collapsePathway = TRUE,
         clinicalFeatures = 'celltype')
```

## Additional oncoprints with more complex annotations

```{r}
#| warning: false
#| code-fold: true

## Color coding
ghibli_colors <- ghibli_palette("PonyoMedium", type = "discrete")
# ghibli_colors
respcolors <- c("#278B9AFF","#E75B64FF")
names(respcolors) = c("CB","NCB")
fabcolors = RColorBrewer::brewer.pal(n = 5,name = 'Spectral')
names(fabcolors) = c("CR", "PR", "SD_CB", "SD_NCB", "PD")
txcolors = c("#BEAED4","#7FC97F")
names(txcolors) = c("Nivo","Combo")
cellcolors = RColorBrewer::brewer.pal(n = 6,name = 'PRGn')
names(cellcolors) = c("Serous_Adenocarcinoma","Endometrioid_Adenocarcinoma","Adenocarcinoma",
                      "Clear_Cell","Mixed_Epithelial","Undifferentiated_Carcinoma")


anno_cols = list(tx = txcolors, response2 = fabcolors, Survtime = "Blues", celltype = cellcolors)
anno_cols2 = list(tx = txcolors, responseCB = respcolors, Survtime = "Blues", celltype = cellcolors)
#print(anno_cols2)

```

```{r}
#| fig.width: 9
#| fig.height: 9
#| warning: false

oncoplot(
  maf = laml_tum,
  clinicalFeatures = c('response2','tx',  'Survtime','celltype'),
  sortByAnnotation = TRUE,
  annotationColor = anno_cols
)

oncoplot(
  maf = laml_tum,
  clinicalFeatures = c('responseCB','tx','Survtime','celltype'),
  sortByAnnotation = TRUE,
  draw_titv = TRUE,
  annotationColor = anno_cols2,
  pathways = "smgbp", gene_mar = 8, fontSize = 0.6, topPathways = 2,
  additionalFeature = c("vcf_id", "GERMLINE_PATHOGENIC")
)
```

# Other Visualizations

## Transitions and transversions

**Transitions** are changes between two purines (A \<-\> G) or two pyrimidines (C \<-\> T), involving bases of simliar shapes.

**Transversions** are changes from a purine to a pyrimidine or vice versa, resulting in the exchange of one-ring and two-ring structures.

Here's a nice picture from [this](https://www.mun.ca/biology/scarr/Transitions_vs_Transversions.html#:~:text=Transitions%20are%20interchanges%20of%20two,ring%20&%20two%2Dring%20structures.) page: ![](https://www.mun.ca/biology/scarr/Transitions_&_Transversions.gif)

**Transitions** tend to be more common than **transversions**, despite there being twice as many *possible* transversions.

The `titiv` function summarizes these for the dataset:

```{r}
#| fig.width: 9
#| warning: false

laml.titv = titv(maf = laml_tum, plot = FALSE, useSyn = TRUE)

#plot titv summary
plotTiTv(res = laml.titv, plotNotch = TRUE)
```

Here are the plots separated by histology:

```{r}

# Serous
laml.titv.ser = titv(maf = laml_ser, plot = FALSE, useSyn = TRUE)
plotTiTv(res = laml.titv.ser, plotNotch = TRUE)

# Non-Serous
laml.titv.other = titv(maf = laml_other, plot = FALSE, useSyn = TRUE)
plotTiTv(res = laml.titv.other)
```

## Lollipop plots

Draws a lollipop plot of amino acid changes on a protein structure (protein domains are derived from the [PFAM database](http://pfam.xfam.org/)).

Let's look at the plot for `TP53` (the most mutated gene in overall ovarian cohort)

```{r}
#| fig.width: 9
#| warning: false

# Lollipop plot for TP53
lollipopPlot(
  maf = laml_tum,
  gene = 'TP53',
  showMutationRate = TRUE
)
```

However, we know it's the most commonly mutated gene because the majority of the samples are Serous.

This is what it looks like stratified by histology:

```{r}
#| fig.width: 9
#| warning: false

# Serous
lollipopPlot(
  maf = laml_ser,
  gene = 'TP53',
  showMutationRate = TRUE
)

# Non-Serous
lollipopPlot(
  maf = laml_other,
  gene = 'TP53',
  showMutationRate = TRUE
)
```

What about `ARID1A`? Here is the full cohort:

```{r}
#| fig.width: 9
#| warning: false

# Lollipop plot for ARID1A
lollipopPlot(
  maf = laml_tum,
  gene = 'ARID1A',
  showMutationRate = TRUE
)
```

And stratified by histology:

```{r}
#| fig.width: 9
#| warning: false

# Serous
lollipopPlot(
  maf = laml_ser,
  gene = 'ARID1A',
  showMutationRate = TRUE
)

# Non-Serous
lollipopPlot(
  maf = laml_other,
  gene = 'ARID1A',
  showMutationRate = TRUE
)
```

::: callout-caution
### #*KelseyNote*#

I need to better understand what specifically is being plotted here; based on cBioPortal, and because this is the *protein* that's being shown, it's only the exons, but I need to better understand these functional regions that are being highlighted. 

The x-axis here is amino acids, not base pairs. 
:::

## Rainfall plots

Rainfall plots illustrate "hypermutated" genomic regions.

Setting `detectChangePoints` = **TRUE** detects genomic change points where potential *kataegis* are found.

*Kataegis* are genomic segments containing six or more consecutive mutations with an average inter-mutation distance of \<=1,000 bp.

::: {.callout-tip collapse="true"}
### More on *kataegis*

From the `maftools` help page for `rainfallPlot()`:

> Kategis detection algorithm by Moritz Goretzky at WWU Munster, which exploits the definition of Kategis (six consecutive mutations with an avg. distance of 1000 bp ) to identify hyper mutated genomic loci.
>
> -   Algorithm starts with a double-ended queue to which six consecutive mutations are added and their average inter-mutation distance is calculated.
> -   If the average inter-mutation distance is larger than 1000, one element is added at the back of the queue and one is removed from the front.
> -   If the average inter-mutation distance is less or equal to 1000, further mutations are added until the average inter-mutation distance is larger than 1000.
> -   After that, all mutations in the double-ended queue are written into output as one kataegis and the double-ended queue is reinitialized with six mutations.
:::

By default, it plots the most mutated sample.

```{r}
#| fig.width: 9

rainfallPlot(
  maf = laml_tum, 
  detectChangePoints = TRUE, 
  pointSize = 0.4,
  ref.build = "hg38"
)

# Here's a sample with kataegis
rainfallPlot(
  maf = laml_tum, 
  detectChangePoints = TRUE, 
  pointSize = 0.4,
   tsb = "GADGAE",
  ref.build = "hg38"
 )
```

:::{.callout-caution}

### #*KelseyNote*#
I need to think of a good way to evaluate these for all samples; maybe just a script for only this for each sample and then summarize? 

Think about this...
:::

## Compare TMB to TCGA

```{r}
#| fig.width: 9
#| warning: false

## Capture size for Twist Bioscience Human Comprehensive Exome kit (used for WES) is 36.8Mb
laml.mutload = tcgaCompare(maf = laml_tum, cohortName = 'NRG-GY003', logscale = TRUE, capture_size = 36.8)


# Just in serous
laml.mutload = tcgaCompare(maf = laml_ser, cohortName = 'NRG-GY003', logscale = TRUE, capture_size = 36.8)
# Other
laml.mutload = tcgaCompare(maf = laml_other, cohortName = 'NRG-GY003', logscale = TRUE, capture_size = 36.8)

```

:::{.callout-caution}

### #*KelseyNote*# 

This is much better than when I used the Genewiz analysis (where they likely used a common reference genome and called everything outside that a somatic mutation), but this still seems a bit high compared to the ovarian cohort. 

I know most of the TCGA samples are primaries, but I guess most of these are too, so it should be fairly comparable. Need to consider how much of a problem this is (or isn't).
:::

# Analysis

## Somatic interactions

Mutually exclusive or co-occurring set of genes can be detected using the `somaticInteractions` function, which performs pair-wise Fisher’s Exact test to detect such significant pair of genes.

```{r}
# Exclusive/co-occurance event analysis on top 10 mutated genes
## Full cohort
somaticInteractions(maf = laml_tum, top = 25, pvalue = c(0.05, 0.1))

## Serous only
somaticInteractions(maf = laml_ser, top = 25, pvalue = c(0.05, 0.1))
## Non-Serous
somaticInteractions(maf = laml_other, top = 25, pvalue = c(0.05, 0.1))

## CB
somaticInteractions(maf = laml_CB, top = 25, pvalue = c(0.05, 0.1))
## NCB
somaticInteractions(maf = laml_NCB, top = 25, pvalue = c(0.05, 0.1))

```

:::{.callout-caution}

### #*KelseyNote*#

I'm not sure how meaningful this analysis is. 

Something to be cautious of, especially in the CB/NCB analysis, is that the cohort is enriched for Serous histology but that may not be evenly distributed between CB/NCB groups (should test this). 

So we could be picking up on histological differences that we mistake for real response signals. 
:::

## Pfam domains
The `pfamDomains` function performs domain enrichment analysis, grouping protein domains to identify the most dysregulated pathways and protein families involved in similar functions.

`pfamDomains` summarizes amino acid positions and annotates them with pfam domain info. 

It returns two tables summarized by 1) amino acid positions and 2) domains. 

It also plots the top most mutated domains as a scatter plot. 
```{r}
#| fig.width: 9
#| warning: false

# Scatter plot with the top 10 mutated domains
laml.pfam = pfamDomains(maf = laml_tum, top = 10)

# Amino acid positions 
proteinhead <- head(laml.pfam$proteinSummary)
gt(proteinhead)

# Domains
domainhead <- head(laml.pfam$domainSummary)
gt(domainhead)

```

Here are the results stratified by histology
```{r}
#| fig.width: 9
#| warning: false

# Serous
laml.pfam.ser = pfamDomains(maf = laml_ser, top = 10)

# Non-Serous
laml.pfam.other = pfamDomains(maf = laml_other, top = 10)
```

Here they are stratified by response
```{r}
#| fig.width: 9
#| warning: false

# CB
laml.pfam.CB = pfamDomains(maf = laml_CB, top = 10)
# CB Domains
domainhead_CB <- head(laml.pfam.CB$domainSummary, n=10)
gt(domainhead_CB)

# NCB
laml.pfam.NCB = pfamDomains(maf = laml_NCB, top = 10)
# NCB Domains
domainhead_NCB <- head(laml.pfam.NCB$domainSummary, n=10)
gt(domainhead_NCB)

```

:::{.callout-caution}

#### #*KelseyNote*#

The domains are largely similar between CB and NCB, but CB has `WD40` in the top 4, but it's #20 for NCB. 

`LamG` is also only in CB top 10 (#13 for NCB), while `S_TKc` and `Ig` are in NCB top 10 (`Ig` is #19 for CB; `S_TKc` not in CB top 20).

Again, not sure how meaningful this kind of analysis is.
:::

# Survival Analysis 
```{r}
#| fig.width: 9
#| warning: false

#Survival analysis based on grouping of TP53 mutation status
mafSurvival(maf = laml_tum, genes = 'TP53', time = 'Survtime', Status = 'Survstat')

# This...looks wrong. I don't think the events are being recognized correctly. 

```